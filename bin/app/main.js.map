{"version":3,"sources":["bind-event.js","decode-data.js","canvas.js","main.js","components/place-item/place-item.js","components/place-point/colorize.js","components/place-point/place-point.js","components/cost/cost.js","components/search/search.js"],"names":["__","bindEvent","elem","eventName","event","listners","$","data","name","document","on","unbindEvent","off","decodeData","places","each","p","i","e","ecos","ecoId","obj","cities","cityId","railroad","stationId","id","point","price","from","to","n","readyDate","type","t","class","k","car","distance","time","h","m","moscow","closest","r","s","city","c","eco","ec","canvas","visible","push","L","CanvasOverlay","Class","extend","initialize","userDrawFunc","options","this","_userDrawFunc","setOptions","drawing","params","_canvas","redraw","_frame","Util","requestAnimFrame","_redraw","onAdd","map","_map","DomUtil","create","size","getSize","width","x","height","y","animated","zoomAnimation","Browser","any3d","addClass","_panes","overlayPane","appendChild","_reset","_resize","_animateZoom","onRemove","getPanes","removeChild","this_canvas","addTo","addLayer","resizeEvent","newSize","topLeft","containerPointToLayerPoint","setPosition","bounds","getBounds","zoomScale","getEast","getWest","zoom","getZoom","scale","getZoomScale","offset","_getCenterOffset","center","_multiplyBy","subtract","_getMapPanePos","style","TRANSFORM","getTranslateString","canvasOverlay","leafletMap","setView","tileLayer","trigger","click","DATA","offsetX","offsetY","el","x1","x2","y1","y2","console","log","_this","placePoint","ctx","place","length","find","search","$last","top","window","outerHeight","count","bind","onlyVisible","empty","append","placeItem","_price","global","component","value","cost","concat","_color","color","_type","_car","_rjd","tpl","currentTarget","attr","split","LatLng","colorize","rgba","g","b","a","interpolation","minFrom","maxFrom","current","minTo","maxTo","blendColors","base","added","mix","Math","round","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","fillStyle","dot","latLngToContainerPoint","beginPath","arc","PI","fill","closePath","test","replace","request","text","toLowerCase","trim","results","indexOf","scrollTop"],"mappings":"aAAA,IAAAA,GAAAA,IAAA,GACA,SAAAC,UAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAA,QAAAC,KAAA,aAAA,GACAF,EAAAH,EAAA,IAAAC,KACAE,EAAAH,EAAA,IAAAC,GAAA,CACAK,KAAAN,EACAE,MAAAD,GAGAG,EAAA,QAAAC,KAAA,WAAAF,GAEAC,EAAAG,UAAAC,GAAAP,EAAAD,EAAAE,IAIA,SAAAO,YAAAT,EAAAC,GACA,IAAAE,EAAAC,EAAA,QAAAC,KAAA,aAAA,UACAF,EAAAH,EAAA,IAAAC,GACAG,EAAA,QAAAC,KAAA,WAAAF,GACAC,EAAAG,UAAAG,IAAAT,EAAAD,GClBA,SAAAW,WAAAN,GACA,IAAAO,EAAA,GA0FA,OAvFAR,EAAAS,KAAAR,EAAAS,EAAA,SAAAC,EAAAC,GAEA,IA4DAC,EAAAC,EACAC,EAjBAC,EAAAC,EACAF,EAtBAG,EAAAC,EACAJ,EAxBAL,EAAA,CACAU,GAAAR,EAAA,GACAS,MAAA,CAAAT,EAAA,IAAAA,EAAA,IACAU,MAAA,CACAC,MAAA,EAAAX,EAAA,IAAAA,EAAA,IAAA,KACAY,IAAA,EAAAZ,EAAA,IAAAA,EAAA,IAAA,MAEAV,KAAAD,EAAAwB,EAAAb,EAAA,KACAc,UAAAd,EAAA,GAAAA,EAAA,GAAA,KACAe,MAAA,EAAAf,EAAA,IAAAX,EAAA2B,EAAAhB,EAAA,KAAA,KACAiB,OAAA,EAAAjB,EAAA,IAAAX,EAAA6B,EAAAlB,EAAA,KAAA,KACAmB,IAAA,CACAC,SAAApB,EAAA,GACAqB,KAAA,CACAC,EAAAtB,EAAA,GACAuB,EAAAvB,EAAA,KAGAwB,OAAA,CACAJ,SAAApB,EAAA,IAEAM,SAAA,CACAc,SAAApB,EAAA,GACAyB,SAAAnB,EAiBAjB,EAAAqC,EAjBAnB,EAiBAP,EAAA,GAhBAG,EAAA,GACAf,EAAAS,KAAAS,EAAA,SAAAP,EAAA4B,GACApB,GAAAoB,EAAA,KACAxB,EAAA,CACAK,GAAAmB,EAAA,GACArC,KAAAqC,EAAA,GACAlB,MAAA,CAAAkB,EAAA,GAAAA,EAAA,IACAP,SAAAO,EAAA,GACAN,KAAA,CACAC,EAAAK,EAAA,GACAJ,EAAAI,EAAA,QAKAxB,IAGAyB,KAAA,CACAR,SAAApB,EAAA,IACAyB,SAAArB,EAYAf,EAAAwC,EAZAxB,EAYAL,EAAA,IAXAG,EAAA,GACAf,EAAAS,KAAAO,EAAA,SAAAL,EAAA8B,GACAxB,GAAAwB,EAAA,KACA1B,EAAA,CACAK,GAAAqB,EAAA,GACAvC,KAAAuC,EAAA,GACApB,MAAA,CAAAoB,EAAA,GAAAA,EAAA,QAIA1B,IAGA2B,IAAA,CACAV,SAAApB,EAAA,GACAyB,SAAAxB,EAaAZ,EAAAW,EAbAE,EAaAF,EAAA,IAZAG,EAAA,GACAf,EAAAS,KAAAI,EAAA,SAAAF,EAAAgC,GACA7B,GAAA6B,EAAA,KACA5B,EAAA,CACAK,GAAAuB,EAAA,GACAzC,KAAAyC,EAAA,GACAtB,MAAA,CAAAsB,EAAA,GAAAA,EAAA,IACAhB,KAAAgB,EAAA,OAIA5B,IAGA6B,OAAA,CACAC,SAAA,IAIArC,EAAAsC,KAAApC,KAKAF,EC3EAuC,EAAAC,cAAAD,EAAAE,MAAAC,OAAA,CAEAC,WAAA,SAAAC,EAAAC,GACAC,KAAAC,cAAAH,EACAL,EAAAS,WAAAF,KAAAD,IAGAI,QAAA,SAAAL,GAEA,OADAE,KAAAC,cAAAH,EACAE,MAGAI,OAAA,SAAAL,GAEA,OADAN,EAAAS,WAAAF,KAAAD,GACAC,MAGAV,OAAA,WACA,OAAAU,KAAAK,SAGAC,OAAA,WAIA,OAHAN,KAAAO,SACAP,KAAAO,OAAAd,EAAAe,KAAAC,iBAAAT,KAAAU,QAAAV,OAEAA,MAKAW,MAAA,SAAAC,GACAZ,KAAAa,KAAAD,EACAZ,KAAAK,QAAAZ,EAAAqB,QAAAC,OAAA,SAAA,yBAEA,IAAAC,EAAAhB,KAAAa,KAAAI,UACAjB,KAAAK,QAAAa,MAAAF,EAAAG,EACAnB,KAAAK,QAAAe,OAAAJ,EAAAK,EAEA,IAAAC,EAAAtB,KAAAa,KAAAd,QAAAwB,eAAA9B,EAAA+B,QAAAC,MACAhC,EAAAqB,QAAAY,SAAA1B,KAAAK,QAAA,iBAAAiB,EAAA,WAAA,SAGAV,EAAAe,OAAAC,YAAAC,YAAA7B,KAAAK,SAEAO,EAAA9D,GAAA,UAAAkD,KAAA8B,OAAA9B,MACAY,EAAA9D,GAAA,SAAAkD,KAAA+B,QAAA/B,MAEAY,EAAAb,QAAAwB,eAAA9B,EAAA+B,QAAAC,OACAb,EAAA9D,GAAA,WAAAkD,KAAAgC,aAAAhC,MAGAA,KAAA8B,UAGAG,SAAA,SAAArB,GACAA,EAAAsB,WAAAN,YAAAO,YAAAnC,KAAAK,SAEAO,EAAA5D,IAAA,UAAAgD,KAAA8B,OAAA9B,MACAY,EAAA5D,IAAA,SAAAgD,KAAA+B,QAAA/B,MAEAY,EAAAb,QAAAwB,eACAX,EAAA5D,IAAA,WAAAgD,KAAAgC,aAAAhC,MAEAoC,YAAA,MAIAC,MAAA,SAAAzB,GAEA,OADAA,EAAA0B,SAAAtC,MACAA,MAGA+B,QAAA,SAAAQ,GACAvC,KAAAK,QAAAa,MAAAqB,EAAAC,QAAArB,EACAnB,KAAAK,QAAAe,OAAAmB,EAAAC,QAAAnB,GAEAS,OAAA,WACA,IAAAW,EAAAzC,KAAAa,KAAA6B,2BAAA,CAAA,EAAA,IACAjD,EAAAqB,QAAA6B,YAAA3C,KAAAK,QAAAoC,GACAzC,KAAAU,WAGAA,QAAA,WACA,IAAAM,EAAAhB,KAAAa,KAAAI,UACA2B,EAAA5C,KAAAa,KAAAgC,YACAC,EAAA,IAAA9B,EAAAG,GAAA,aAAAyB,EAAAG,UAAAH,EAAAI,YACAC,EAAAjD,KAAAa,KAAAqC,UAIAlD,KAAAC,eACAD,KAAAC,cAAAD,KACA,CACAV,OAAAU,KAAAK,QACAuC,OAAAA,EACA5B,KAAAA,EACA8B,UAAAA,EACAG,KAAAA,EACAlD,QAAAC,KAAAD,UAOAC,KAAAO,OAAA,MAGAyB,aAAA,SAAA1E,GACA,IAAA6F,EAAAnD,KAAAa,KAAAuC,aAAA9F,EAAA2F,MACAI,EAAArD,KAAAa,KAAAyC,iBAAAhG,EAAAiG,QAAAC,aAAAL,GAAAM,SAAAzD,KAAAa,KAAA6C,kBAEA1D,KAAAK,QAAAsD,MAAAlE,EAAAqB,QAAA8C,WAAAnE,EAAAqB,QAAA+C,mBAAAR,GAAA,UAAAF,EAAA,OAKA1D,EAAAqE,cAAA,SAAAhE,EAAAC,GACA,OAAA,IAAAN,EAAAC,cAAAI,EAAAC,ICtIArD,EAAA,WAEA,IAAAqH,EAAAtE,EAAAmB,IAAA,OAAAoD,QAAA,CAAA,UAAA,WAAA,GHDAvE,EAAAwE,UAAA,0KGIA5B,MAAA0B,GHFAtH,EAAAA,IAAAA,qBAAAA,SAAAA,GAEAD,EAAAA,WAAAA,GAGAE,EAAAA,QAAAA,KAAAA,SAAAA,GAGAA,EAAA,QAAAwH,QAAA,YAAA,CACAhH,OAAAA,IAGAR,EAAA,WAAAwH,QAAA,aAAA,CACAhH,OAAAA,EACAR,aAAAA,MGOAA,EAAA,QAAAyH,MAAA,SAAA7G,GAEA,IAAA8G,EAAA1H,EAAA,QAAAC,KAAA,UACAwE,EAAA7D,EAAA+G,QACAhD,EAAA/D,EAAAgH,QAEA5H,EAAAS,KAAAiH,EAAA,SAAA/G,EAAAkH,GAEApD,EAAAoD,EAAAjF,OAAAkF,IACArD,EAAAoD,EAAAjF,OAAAmF,IACApD,EAAAkD,EAAAjF,OAAAoF,IACArD,EAAAkD,EAAAjF,OAAAqF,IACAC,QAAAC,IAAAxD,EAAAkD,ODhBA9E,KAAAA,MAAAA,GAAAA,KAAAA,YAAAA,SAAAA,EAAAA,GAGAU,IAAAA,EAAAA,KACAjD,EAAAkD,EAAAlD,OAEAiC,EAAAM,EAAAqE,gBAAA3D,QAKA,SAAA2D,EAAA1G,GAEAkC,IAAAA,EAAAA,EAAAA,OAAAA,WAAAA,MACA2D,EAAAvG,EAAAoI,GAAAnI,KAAA,OAAAuG,UAGA5C,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,OAAAA,MAAAA,EAAAA,OAAAA,QAEA5D,EAAAS,KAAAD,EAAA,SAAAG,EAAAC,GCmBAA,EAAAgC,OAAAC,UAAAjC,EAAAgC,OAAAlD,GAAA2I,WAAA,CDjBAC,IAAAA,EACAlB,cAAAA,EAIAnD,KAAAA,EACAsE,MAAA3H,SArBA+E,MAAA0B,GAGAtE,EAAAA,GAAAA,KAAAA,SAAAA,KA6BAmB,EAAAA,WAAAA,OAAAA,SAAAA,GCeA,IAAAkE,EAAA9E,KDbAY,EAAAA,EAAAA,GAAAA,KAAAA,eAAAA,OCgBAsE,GDfAtE,EAAAA,KAAAA,MAAAA,MAAAA,KAAAA,GCeAlE,EAAAoI,GAAAK,KAAA,eAAAD,QDXA,IAFAxI,EAAA,QAAAC,KAAA,OAEAyI,QAAAC,EAAAhC,SAAAiC,IAAA,EAAA5I,EAAA6I,QAAAC,cAAA,CAEA,IAAApB,EAAA1H,EAAA,QAAAC,KAAA,UACA8I,EAAA,IAGA7E,EAAAA,KAAAA,EAAAA,SAAAA,EAAAA,GAMAA,GAJAA,EAAAA,IACAA,EAAAA,GAAAA,OAAAA,GAAAA,UAAAA,ICaA6E,MDVA7E,EAAAA,OAAAA,OAIA8E,KAAA,aAAA,SAAAlJ,EAAA4D,GAGAQ,IAAAA,EAAAA,KACA+E,EAAAvF,EAAAuF,cAAA,EACAzI,EAAAkD,EAAAlD,OAGAR,EAAAoI,GAAAc,QAEAlJ,EAAAS,KAAAD,EAAA,SAAAG,EAAAC,GAEA,GAAAqI,EACAlG,EAAAA,OAAAA,SCYA/C,EAAAoI,GAAAe,OAAAzJ,GAAA0J,UAAAxI,QDRAoD,CCaA,KAAArD,EAAA,KDVA,OAAA,EADAX,EAAAoI,GAAAe,OAAAzJ,GAAA0J,UAAAxI,WEpGAlB,GAAA0J,UAAA,SAAA1F,GAGA,IAAApC,EAEAZ,EAFA2I,GAAA/H,EAYAoC,EAAApC,MALA,CACAC,MANAb,EAAA,CACAa,KAAAD,EAAAC,KAAA,oBAAA+H,OAAAA,OAAAC,UAAA,OAAA,CAAAC,MAAAlI,EAAAC,OAAA,GAAA7B,GAAA+J,KAAA,CAAAD,MAAAlI,EAAAC,OAAA,GAAA,GACAC,GAAAF,EAAAE,GAAA,oBAAA8H,OAAAA,OAAAC,UAAA,OAAA,CAAAC,MAAAlI,EAAAE,KAAA,GAAA9B,GAAA+J,KAAA,CAAAD,MAAAlI,EAAAE,KAAA,GAAA,KAIAD,KAAA,MAAAmI,OAAAhJ,EAAAa,KAAA,SAAA,GACAC,GAAAd,EAAAc,GAAA,MAAAkI,OAAAhJ,EAAAc,GAAA,SAAA,KAKAmI,EAAA,oBAAAL,OAAA,UAAA5F,EAAAd,OAAAgH,MAEAC,EAAAnG,EAAA/B,KAAA,kCAAA+H,OAAAhG,EAAA/B,KAAA,WAAA,GAIAmI,GAFApG,EAAAhB,IAAAV,SAAA,IAAA,QAAA0H,OAAAhG,EAAAhB,IAAAL,QAAAnC,KAAA,OAAAwJ,OAAAhG,EAAAhB,IAAAV,SAAA,YAEA,2CAAA0H,OAAAhG,EAAA3B,IAAAE,KAAAC,EAAA,MAAAwH,OAAAhG,EAAA3B,IAAAE,KAAAE,EAAA,SAAAuH,OAAAhG,EAAA3B,IAAAC,SAAA,cAEA+H,EAAArG,EAAAxC,SAAAc,SAAA,EAAA,sCAAA0H,OAAAhG,EAAAxC,SAAAmB,QAAAnC,KAAA,OAAAwJ,OAAAhG,EAAAxC,SAAAc,SAAA,sBAAA0H,OAAAhG,EAAAxC,SAAAmB,QAAAJ,KAAAC,EAAA,MAAAwH,OAAAhG,EAAAxC,SAAAmB,QAAAJ,KAAAE,EAAA,SAAAuH,OAAAhG,EAAAxC,SAAAmB,QAAAL,SAAA,aAAA,GAIAgI,EAAA,qCAAAN,OACAhG,EAAAtC,GADA,8FAAAsI,OAGAC,EAHA,+BAAAD,OAKAG,EALA,mCAAAH,OAKAhG,EAAAxD,KALA,oEAAAwJ,OAQAL,EAAA9H,KARA,KAAAmI,OAQAL,EAAA7H,GARA,sDAAAkI,OAUAI,EAVA,UAAAJ,OAWAK,EAXA,sBAkCA,OAnBApK,UAAA,cAAA,QAAA,SAAAiB,GAEA,IAAA8G,EAAA1H,EAAA,QAAAC,KAAA,UACAiE,EAAAlE,EAAA,QAAAC,KAAA,OACAmB,EAAApB,EAAAY,EAAAqJ,eAAAC,KAAA,MAAAC,MAAA,KAAA,GAEAnK,EAAAS,KAAAiH,EAAA,SAAA/G,EAAAC,GAEA,GAAAA,EAAAQ,IAAAA,EAEA,OADA8C,EAAAoD,QAAA,IAAAvE,EAAAqH,OAAAxJ,EAAAS,MAAA,GAAAT,EAAAS,MAAA,IAAA,KACA,MASA2I,GC/DAtK,GAAA2K,SAAA,SAAA3G,GA+DA,SAAA4G,EAAAhI,EAAAiI,EAAAC,EAAAC,GACA,MAAA,QAAAf,OAAApH,EAAA,KAAAoH,OAAAa,EAAA,KAAAb,OAAAc,EAAA,KAAAd,OAAAe,EAAA,KAGA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAD,GAAAD,EAAAF,IAAAC,EAAAD,KAAAI,EAAAD,GAAA,GAGA,SAAAE,EAAAC,EAAAC,GAEA,IAAAC,EAAA,GAMA,OALAA,EAAA,GAAA,GAAA,EAAAD,EAAA,KAAA,EAAAD,EAAA,IACAE,EAAA,GAAAC,KAAAC,MAAAH,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAF,EAAA,GAAAA,EAAA,IAAA,EAAAC,EAAA,IAAAC,EAAA,IACAA,EAAA,GAAAC,KAAAC,MAAAH,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAF,EAAA,GAAAA,EAAA,IAAA,EAAAC,EAAA,IAAAC,EAAA,IACAA,EAAA,GAAAC,KAAAC,MAAAH,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAF,EAAA,GAAAA,EAAA,IAAA,EAAAC,EAAA,IAAAC,EAAA,IAEAA,EAGA,OA/EA7H,KAAAZ,IAAA,SAAAgB,GAEA,IAAApB,EAAA,GACA,OAAAoB,EAAAhB,IAAAL,QAAAV,MACA,IAAA,IAGA,IAAA,IACAW,EAAA,EACA,MACA,IAAA,IACAA,EAAA,EAIA,IAAAN,EAAA0B,EAAAhB,IAAAV,SAIA4H,EAAAoB,EACA,CAAA,EAAA,GAAA,IAAA,IACA,CAAA,IAAA,GAAA,EAJAhJ,EAAAM,EADA,GACAoI,EAAA,EAAApI,EAAAN,EAAA,EADA,IACA,IAOA,OAAAsI,EAAAV,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAKAtG,KAAApC,SAAA,SAAAwC,GAEA,IAAA1B,EAAA0B,EAAAxC,SAAAc,SAIA4H,EAAAoB,EACA,CAAA,IAAA,GAAA,EAAA,IACA,CAAA,EAAA,GAAA,IAJAhJ,EAAA,EADA,EACA0I,EAAA,EAAA,EAAA1I,EAAA,EADA,GACA,IAOA,OAAAsI,EAAAV,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAKAtG,KAAAvB,IAAA,SAAA2B,GAEA,IAIAkG,EAAAoB,EACA,CAAA,IAAA,GAAA,EAAA,IACA,CAAA,EAAA,GAAA,IALA,GACAN,EAAA,GAAA,IAFAhH,EAAA3B,IAAAC,SAEA,EADA,MAQA,OAAAsI,EAAAV,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAuBAtG,MClFA5D,GAAA2I,WAAA,SAAA3E,GAEA,IA2DAY,EAAA,EA3DA,CACAgH,EAAA,CACA/I,EAAA,IAEAgJ,EAAA,CACAhJ,EAAA,IAEAiJ,EAAA,CACAjJ,EAAA,IAEAkJ,EAAA,CACAlJ,EAAA,GAEAmJ,EAAA,CACAnJ,EAAA,GAEAoJ,EAAA,CACApJ,EAAA,GAEAqJ,EAAA,CACArJ,EAAA,GAEAsJ,EAAA,CACAtJ,EAAA,GAEAuJ,EAAA,CACAvJ,EAAA,GAEAwJ,EAAA,CACAxJ,EAAA,GAEAyJ,GAAA,CACAzJ,EAAA,GAEA0J,GAAA,CACA1J,EAAA,GAEA2J,GAAA,CACA3J,EAAA,GAEA4J,GAAA,CACA5J,EAAA,GAEA6J,GAAA,CACA7J,EAAA,GAEA8J,GAAA,CACA9J,EAAA,GAEA+J,GAAA,CACA/J,EAAA,IAEAgK,GAAA,CACAhK,EAAA,IAEAiK,GAAA,CACAjK,EAAA,KAGAmB,EAAA6C,MAAAhE,EACAqH,EAAAlK,GAAA2K,WAAA3H,IAAAgB,EAAA6E,OAEA7E,EAAA4E,IAAAmE,UAAA7C,EAEA,IAAA8C,EAAAhJ,EAAA0D,cAAAjD,KAAAwI,uBAAA,CAAAjJ,EAAA6E,MAAAlH,MAAA,GAAAqC,EAAA6E,MAAAlH,MAAA,KAOA,OANAqC,EAAA4E,IAAAsE,YACAlJ,EAAA4E,IAAAuE,IAAAH,EAAAjI,EAAAiI,EAAA/H,EAAAL,EAAA,EAAA,EAAA,EAAA8G,KAAA0B,IACApJ,EAAA4E,IAAAyE,OACArJ,EAAA4E,IAAA0E,YAGA,CACAlF,GAAA4E,EAAAjI,EACAuD,GAAA0E,EAAA/H,EACAoD,GAAA2E,EAAAjI,EAAAH,EACA2D,GAAAyE,EAAA/H,EAAAL,EACAsF,MAAAA,EACA/G,QAAAa,EAAA6E,MAAA3F,OAAAC,UC/EAnD,GAAA+J,KAAA,SAAA/F,GAEA,IAAA8F,EAAA9F,EAAA8F,MAKA,OAJAA,EAAA,OAAAyD,KAAAzD,GAAAA,EAAA,GAAAA,EAAA,OAEAA,GADAA,EAAA,UAAAyD,KAAAzD,GAAAA,EAAAA,EAAA,KACA0D,QAAA,oBAAA,QAEA/C,MAAA,MCPAzK,GAAAgJ,OAAA,SAAAhF,GAEA,IAAAgE,EAAA1H,EAAA,QAAAC,KAAA,UACAkN,EAAAzJ,EAAA0J,KAAAC,cAAAC,OACAC,EAAA,GACArJ,EAAAlE,EAAA,QAAAC,KAAA,OA2CA,OAzCAyD,EAAA0J,MACApN,EAAAS,KAAAiH,EAAA,SAAA/G,EAAAC,IAIA,IAFAA,EAAAV,KAAAmN,cAAAC,OAEAE,QAAAL,IAEAvM,EAAAgC,OAAAC,SAAA,EACA0K,EAAAzK,KAAAlC,IAGAA,EAAAgC,OAAAC,SAAA,IAMA0K,EAAA/E,OACAtE,EAAAwE,QAAA,EAEAxE,EAAAwE,QAAA,EAGA1I,EAAA,WAAAwH,QAAA,aAAA,CAAAhH,OAAAkH,EAAAuB,aAAA,IAAAwE,UAAA,KAIAvJ,EAAAwE,QAAA,EACA1I,EAAAS,KAAAiH,EAAA,SAAA/G,EAAAC,GACAA,EAAAgC,OAAAC,SAAA,IAGA7C,EAAA,WAAAwH,QAAA,aAAA,CAAAhH,OAAAkH,EAAAuB,aAAA,KAOAjJ,EAAA,QAAAC,KAAA,UAAA2D,SAEA2J","file":"main.js","sourcesContent":["function bindEvent(elem, eventName, event){\n  var listners = $('#app').data('listners') || {};\n  if (!listners[elem + '|' + eventName]){\n    listners[elem + '|' + eventName] = {\n      name : elem,\n      event : eventName\n    }\n    \n    $('#app').data('listners', listners);\n    \n    $(document).on(eventName,elem,event);\n  }\n}\n\nfunction unbindEvent(elem, eventName){\n  var listners = $('#app').data('listners') || {};\n  delete listners[elem + '|' + eventName];\n  $('#app').data('listners', listners);\n  $(document).off(eventName, elem);\n}","function decodeData(data) {\n  var places = [];\n\n\n  $.each(data.p, function (i, e) {\n\n    var p = {\n      id: e[7],\n      point: [e[15], e[0]],\n      price: {\n        from: (e[13] > -1) ? e[13] : null,\n        to: (e[14] > -1) ? e[14] : null\n      },\n      name: data.n[e[17]],\n      readyDate: (e[6]) ? e[6] : null,\n      type: (e[16] > -1) ? data.t[e[16]] : null,\n      class: (e[18] > -1) ? data.k[e[18]] : null,\n      car: {\n        distance: e[1],\n        time: {\n          h: e[2],\n          m: e[3]\n        }\n      },\n      moscow: {\n        distance: e[8]\n      },\n      railroad: {\n        distance: e[4],\n        closest: (function (railroad, stationId) {\n          var obj = {}\n          $.each(railroad, function (i, s) {\n            if (stationId == s[0]) {\n              obj = {\n                id: s[0],\n                name: s[2],\n                point: [s[1], s[3]],\n                distance: s[4],\n                time: {\n                  h: s[5],\n                  m: s[6]\n                }\n              }\n            }\n          });\n          return obj;\n        })(data.r, e[5])\n      },\n      city: {\n        distance: e[11],\n        closest: (function (cities, cityId) {\n          var obj = {}\n          $.each(cities, function (i, c) {\n            if (cityId == c[0]) {\n              obj = {\n                id: c[0],\n                name: c[2],\n                point: [c[1], c[3]]\n              }\n            }\n          });\n          return obj;\n        })(data.c, e[12])\n      },\n      eco: {\n        distance: e[9],\n        closest: (function (ecos, ecoId) {\n          var obj = {}\n          $.each(ecos, function (i, ec) {\n            if (ecoId == ec[0]) {\n              obj = {\n                id: ec[0],\n                name: ec[2],\n                point: [ec[1], ec[3]],\n                type: ec[4]\n              }\n            }\n          });\n          return obj;\n        })(data.e, e[10])\n      },\n      canvas : {\n        visible : true\n      }\n    }\n\n    places.push(p);\n\n\n  });\n\n  return places;\n\n\n}","/*\n UPDATE July 2016 , moved and updated to here: https://github.com/Sumbera/gLayers.Leaflet\n \n Generic  Canvas Overlay for leaflet, \n Stanislav Sumbera, April , 2014\n\n - added userDrawFunc that is called when Canvas need to be redrawn\n - added few useful params fro userDrawFunc callback\n  - fixed resize map bug\n  inspired & portions taken from  :   https://github.com/Leaflet/Leaflet.heat\n  \n  License: MIT\n\n*/\n\n\nL.CanvasOverlay = L.Class.extend({\n\n    initialize: function (userDrawFunc, options) {\n        this._userDrawFunc = userDrawFunc;\n        L.setOptions(this, options);\n    },\n\n    drawing: function (userDrawFunc) {\n        this._userDrawFunc = userDrawFunc;\n        return this;\n    },\n\n    params:function(options){\n        L.setOptions(this, options);\n        return this;\n    },\n    \n    canvas: function () {\n        return this._canvas;\n    },\n\n    redraw: function () {\n        if (!this._frame) {\n            this._frame = L.Util.requestAnimFrame(this._redraw, this);\n        }\n        return this;\n    },\n\n    \n  \n    onAdd: function (map) {\n        this._map = map;\n        this._canvas = L.DomUtil.create('canvas', 'leaflet-heatmap-layer');\n\n        var size = this._map.getSize();\n        this._canvas.width = size.x;\n        this._canvas.height = size.y;\n\n        var animated = this._map.options.zoomAnimation && L.Browser.any3d;\n        L.DomUtil.addClass(this._canvas, 'leaflet-zoom-' + (animated ? 'animated' : 'hide'));\n\n\n        map._panes.overlayPane.appendChild(this._canvas);\n\n        map.on('moveend', this._reset, this);\n        map.on('resize',  this._resize, this);\n\n        if (map.options.zoomAnimation && L.Browser.any3d) {\n            map.on('zoomanim', this._animateZoom, this);\n        }\n\n        this._reset();\n    },\n\n    onRemove: function (map) {\n        map.getPanes().overlayPane.removeChild(this._canvas);\n \n        map.off('moveend', this._reset, this);\n        map.off('resize', this._resize, this);\n\n        if (map.options.zoomAnimation) {\n            map.off('zoomanim', this._animateZoom, this);\n        }\n        this_canvas = null;\n\n    },\n\n    addTo: function (map) {\n        map.addLayer(this);\n        return this;\n    },\n\n    _resize: function (resizeEvent) {\n        this._canvas.width  = resizeEvent.newSize.x;\n        this._canvas.height = resizeEvent.newSize.y;\n    },\n    _reset: function () {\n        var topLeft = this._map.containerPointToLayerPoint([0, 0]);\n        L.DomUtil.setPosition(this._canvas, topLeft);\n        this._redraw();\n    },\n\n    _redraw: function () {\n        var size     = this._map.getSize();\n        var bounds   = this._map.getBounds();\n        var zoomScale = (size.x * 180) / (20037508.34  * (bounds.getEast() - bounds.getWest())); // resolution = 1/zoomScale\n        var zoom = this._map.getZoom();\n     \n        // console.time('process');\n\n        if (this._userDrawFunc) {\n            this._userDrawFunc(this,\n                                {\n                                    canvas   :this._canvas,\n                                    bounds   : bounds,\n                                    size     : size,\n                                    zoomScale: zoomScale,\n                                    zoom : zoom,\n                                    options: this.options\n                               });\n        }\n       \n       \n        // console.timeEnd('process');\n        \n        this._frame = null;\n    },\n\n    _animateZoom: function (e) {\n        var scale = this._map.getZoomScale(e.zoom),\n            offset = this._map._getCenterOffset(e.center)._multiplyBy(-scale).subtract(this._map._getMapPanePos());\n\n        this._canvas.style[L.DomUtil.TRANSFORM] = L.DomUtil.getTranslateString(offset) + ' scale(' + scale + ')';\n\n    }\n});\n\nL.canvasOverlay = function (userDrawFunc, options) {\n    return new L.CanvasOverlay(userDrawFunc, options);\n};\n","$(function () {\n\n  var leafletMap = L.map('map').setView([55.751244, 37.618423], 9);\n  //L.tileLayer(\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png\")\n  L.tileLayer(\"https://{s}.tiles.mapbox.com/v4/mapbox.dark/{z}/{x}/{y}@2x.png?access_token=pk.eyJ1IjoiZ2xlYWZsZXQiLCJhIjoiY2lxdWxoODl0MDA0M2h4bTNlZ2I1Z3gycyJ9.vrEWCC2nwsGfAYKZ7c4HZA\")\n    .addTo(leafletMap);\n\n  $.get('bin/data/data.json', function (places) {\n    \n    places = decodeData(places);\n\n    $('#app').data('places', places);\n    \n    $('#map').trigger('renderMap', {\n      places: places\n    });\n\n    $('#places').trigger('renderList', {\n      places: places,\n      onlyVisible: false\n    });\n\n  });\n\n  $('#map').click(function (e) {\n\n    var DATA = $('#app').data('places'),\n        x = e.offsetX,\n        y = e.offsetY;\n\n    $.each(DATA, function (i, el) {\n\n      if (x > el.canvas.x1 &&\n        x < el.canvas.x2 &&\n        y > el.canvas.y1 &&\n        y < el.canvas.y2) {\n        console.log(y, el);\n      }\n\n    });\n\n  }).data('map', leafletMap).bind('renderMap', function (event, params) {\n\n    var _this = this,\n        places = params.places;\n\n    var c = L.canvasOverlay().drawing(drawingOnCanvas).addTo(leafletMap);\n    \n    $(_this).data('canvas', c);\n\n    function drawingOnCanvas(canvasOverlay, p) {\n      var ctx = p.canvas.getContext('2d'),\n          zoom = $(_this).data('map').getZoom();\n      \n      ctx.clearRect(0, 0, p.canvas.width, p.canvas.height);\n\n      $.each(places, function (i, e) {\n\n        if (e.canvas.visible) e.canvas = __.placePoint({\n          ctx: ctx,\n          canvasOverlay: canvasOverlay,\n          zoom: zoom,\n          place: e\n        });\n\n      });\n\n    };\n\n  });\n\n\n  $('#places').scroll(function (e) {\n    var _this = this,\n        $last = $(_this).find('.place-item').last(),\n        lastId = $last.attr('id').split('-')[1],\n        length = $(_this).find('.place-item').length,\n        map = $('#map').data('map');\n\n    if (!map.search && $last.offset().top < $(window).outerHeight() * 2) {\n\n      var DATA = $('#app').data('places'),\n          count = 100;\n      \n      $.each(DATA, function (i, e) {\n        if (length < i) {\n          $(_this).append(__.placeItem(e));\n          count--;\n        }\n        if (!count) return false;\n      });\n    }\n\n  }).bind('renderList', function (event, params) {\n\n    var _this = this,\n        onlyVisible = params.onlyVisible || false,\n        places = params.places;\n\n    $(_this).empty();\n\n    $.each(places, function (i, e) {\n\n      if (onlyVisible) {\n\n        if (e.canvas.visible) {\n          $(_this).append(__.placeItem(e));\n        }\n\n      } else {\n\n        if (i < 100) {\n          $(_this).append(__.placeItem(e));\n        } else {\n          return false;\n        }\n      }\n\n    });\n\n  });\n\n});","__.placeItem = function(params){\n  \n  \n  let _price = (function(price){\n      \n    let p = {\n      from : (price.from) ? (typeof global != 'undefined') ? global.component('cost', {value : price.from })[0] : __.cost({value : price.from })[0] : '',\n      to   : (price.to)   ? (typeof global != 'undefined') ? global.component('cost', {value : price.to })[0]   : __.cost({value : price.to })[0]   : ''\n    }  \n    \n    return {\n      from : (p.from) ? `от ${p.from} руб.` : '',\n      to : (p.to) ? `до ${p.to} руб.` : ''\n    }\n        \n  })(params.price);\n  \n  let _color = (typeof global != 'undefined') ? '#fafafa' : params.canvas.color;\n  \n  let _type = (params.type) ? `<span class=\"place-item__type\">${params.type}</span>` : ''; \n  \n  let _eco = (params.eco.distance < 10) ? `<div>${params.eco.closest.name} в ${params.eco.distance}км</div>` : '';\n    \n  let _car = `<div class=\"place-item__car\">до Москвы: ${params.car.time.h}ч ${params.car.time.m}мин (${params.car.distance}км)</div>`;\n  \n  let _rjd = (params.railroad.distance < 3) ? `<div class=\"place-item__train\">ст. ${params.railroad.closest.name} в ${params.railroad.distance}км,<br>до Москвы: ${params.railroad.closest.time.h}ч ${params.railroad.closest.time.m}мин (${params.railroad.closest.distance}км)</div>` : ''; \n  \n\n  \n  let tpl = \n`<div class=\"place-item\" id=\"place-${params.id}\">\n  <div class=\"place-item__title\">\n    <div class=\"place-item__pin\" style=\"background:${_color}\"></div>\n    <div>\n      ${_type}<span class=\"place-item__name\">${params.name}</span>\n    </div>\n  </div>\n  <div class=\"place-item__price\">${_price.from} ${_price.to}</div>\n  <div class=\"place-item__distance\">\n    ${_car}\n    ${_rjd}\n  </div>\n</div>`;\n    \n  bindEvent('.place-item', 'click', function(e){\n    \n    var DATA = $('#app').data('places'),\n        map = $('#map').data('map'),\n        id = $(e.currentTarget).attr('id').split('-')[1];\n    \n    $.each(DATA, function(i,e){\n      \n      if (e.id == id){\n        map.setView(new L.LatLng(e.point[1], e.point[0]), 14);\n        return false;\n      }\n      \n    });\n    \n    \n      \n  })\n    \n  return tpl;\n  \n}","__.colorize = function(params){\n   \n  //ecology\n  this.eco = function(params) {\n    \n    var r = 10;\n    switch (params.eco.closest.type) {\n      case 'K':\n        r = 3;\n        break;\n      case 'p':\n        r = 3;\n        break;\n      case 'n':\n        r = 5;\n        break;\n    }\n\n    var distance = params.eco.distance;\n    var alphaMax = 0.6;\n    var alpha = (distance < r) ? alphaMax - interpolation(0, r, distance, 0, alphaMax) : 0;\n\n    var color = blendColors(\n    [0, 98, 255, .3],\n    [255, 30, 0, alpha]\n    );\n\n    return rgba(color[0],color[1],color[2],color[3]);\n\n  }\n  \n  //railroad\n  this.railroad = function(params) {\n    \n    var distance = params.railroad.distance;\n    var alphaMax = 1;\n    var alpha = (distance < 3) ? alphaMax - interpolation(0, 3, distance, 0, alphaMax) : 0;\n\n    var color = blendColors(\n    [255, 30, 0, .1],\n    [0, 98, 255, alpha]\n    );\n\n    return rgba(color[0],color[1],color[2],color[3]);\n    \n  }\n  \n  //car distance\n  this.car = function(params) {\n    \n    var distance = params.car.distance;\n    var alphaMax = 0.3;\n    var alpha = alphaMax - interpolation(10, 200, distance, 0, alphaMax);\n\n    var color = blendColors(\n    [255, 30, 0, .1],\n    [0, 98, 255, alpha]\n    );\n\n    return rgba(color[0],color[1],color[2],color[3]);\n    \n  }\n  \n  function rgba(r,g,b,a){\n    return `rgba(${r},${g},${b},${a})`;\n  }\n  \n  function interpolation(minFrom, maxFrom, current, minTo, maxTo) {\n    return minTo + ((current - minFrom) / (maxFrom - minFrom)) * ((maxTo - minTo) / 1);\n  }\n\n  function blendColors(base, added) {\n\n    var mix = [];\n    mix[3] = 1 - (1 - added[3]) * (1 - base[3]); // alpha\n    mix[0] = Math.round((added[0] * added[3] / mix[3]) + (base[0] * base[3] * (1 - added[3]) / mix[3])); // red\n    mix[1] = Math.round((added[1] * added[3] / mix[3]) + (base[1] * base[3] * (1 - added[3]) / mix[3])); // green\n    mix[2] = Math.round((added[2] * added[3] / mix[3]) + (base[2] * base[3] * (1 - added[3]) / mix[3])); // blue\n\n    return mix;\n  }\n  \n  return this;\n  \n}","__.placePoint = function (params) {\n\n  const s = {\n      0: {\n        s: .5\n      },\n      1: {\n        s: .5\n      },\n      2: {\n        s: .5\n      },\n      3: {\n        s: 1\n      },\n      4: {\n        s: 1\n      },\n      5: {\n        s: 2\n      },\n      6: {\n        s: 2\n      },\n      7: {\n        s: 3\n      },\n      8: {\n        s: 3\n      },\n      9: {\n        s: 3\n      },\n      10: {\n        s: 4\n      },\n      11: {\n        s: 4\n      },\n      12: {\n        s: 4\n      },\n      13: {\n        s: 6\n      },\n      14: {\n        s: 6\n      },\n      15: {\n        s: 6\n      },\n      16: {\n        s: 12\n      },\n      17: {\n        s: 12\n      },\n      18: {\n        s: 12\n      }\n    },\n    size = s[params.zoom].s * 2,\n    color = __.colorize().eco(params.place);\n  \n  params.ctx.fillStyle = color;\n\n  var dot = params.canvasOverlay._map.latLngToContainerPoint([params.place.point[1], params.place.point[0]]);\n  params.ctx.beginPath();\n  params.ctx.arc(dot.x, dot.y, size / 2, 0, Math.PI * 2);\n  params.ctx.fill();\n  params.ctx.closePath();\n\n\n  return {\n    x1: dot.x,\n    y1: dot.y,\n    x2: dot.x + size,\n    y2: dot.y + size,\n    color: color,\n    visible : params.place.canvas.visible\n  };\n\n}","__.cost = function(params) {\n  \n    var value = params.value;\n    value = (/\\.\\d/.test(value)) ? value + '' : value + '.00';\n    value = (/\\.\\d{2}/.test(value)) ? value : value + '0';\n    value = (value).replace(/\\d(?=(\\d{3})+\\.)/g, '$& ');\n\n    return value.split('.');\n  \n}","__.search = function(params){\n  \n  var DATA = $('#app').data('places'),\n      request = params.text.toLowerCase().trim(),\n      results = [],\n      map = $('#map').data('map');\n  \n  if (params.text){\n    $.each(DATA, function(i,e){\n\n      var name = e.name.toLowerCase().trim();\n\n      if (name.indexOf(request) !== -1){\n\n        e.canvas.visible = true;\n        results.push(e);\n      } else {\n\n        e.canvas.visible = false;\n\n      }\n\n    });\n\n    if (results.length) {\n      map.search = true;\n    } else {\n      map.search = false;  \n    }\n    \n     $('#places').trigger('renderList', {places : DATA, onlyVisible: true}).scrollTop(0);\n    \n  } else {\n    \n    map.search = false;\n    $.each(DATA, function(i,e){\n      e.canvas.visible = true;\n    });\n    \n    $('#places').trigger('renderList', {places : DATA, onlyVisible: false});\n    \n    \n    \n  }\n  \n  \n  $('#map').data('canvas').redraw();\n  \n  return results;\n  \n}"],"sourceRoot":"/source/"}